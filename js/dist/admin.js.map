{"version":3,"file":"admin.js","mappings":"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","sources":["webpack://@clarkwinkelmann/popular-discussion-badge/webpack/bootstrap","webpack://@clarkwinkelmann/popular-discussion-badge/webpack/runtime/compat get default export","webpack://@clarkwinkelmann/popular-discussion-badge/webpack/runtime/define property getters","webpack://@clarkwinkelmann/popular-discussion-badge/webpack/runtime/hasOwnProperty shorthand","webpack://@clarkwinkelmann/popular-discussion-badge/webpack/runtime/make namespace object","webpack://@clarkwinkelmann/popular-discussion-badge/external root \"flarum.core.compat['admin/app']\"","webpack://@clarkwinkelmann/popular-discussion-badge/external root \"flarum.core.compat['common/components/Button']\"","webpack://@clarkwinkelmann/popular-discussion-badge/external root \"flarum.core.compat['common/components/Select']\"","webpack://@clarkwinkelmann/popular-discussion-badge/./src/admin/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['admin/app'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Button'];","const __WEBPACK_NAMESPACE_OBJECT__ = flarum.core.compat['common/components/Select'];","import app from 'flarum/admin/app';\nimport Button from 'flarum/common/components/Button';\nimport Select from 'flarum/common/components/Select';\n\nconst settingsPrefix = 'clarkwinkelmann-popular-discussion-badge.';\nconst translationPrefix = 'clarkwinkelmann-popular-discussion-badge.admin.settings.';\n\ninterface Condition {\n    comments: number | null\n    comments_within_hours?: number | null\n    views: number | null\n    views_within_hours?: number | null\n}\n\napp.initializers.add('clarkwinkelmann-popular-discussion-badge', () => {\n    app.extensionData\n        .for('clarkwinkelmann-popular-discussion-badge')\n        .registerSetting(function () {\n            let conditionsList: Condition[];\n\n            try {\n                conditionsList = JSON.parse(this.setting(settingsPrefix + 'conditions')());\n            } catch (e) {\n                // do nothing, we'll reset to something usable\n            }\n\n            if (!Array.isArray(conditionsList)) {\n                conditionsList = [{\n                    comments: null,\n                    views: null,\n                }];\n            }\n\n            return [\n                m('.Form-group', [\n                    m('label', app.translator.trans(translationPrefix + 'mode')),\n                    Select.component({\n                        options: {\n                            frontend: app.translator.trans(translationPrefix + 'mode_options.frontend'),\n                            scheduler: app.translator.trans(translationPrefix + 'mode_options.scheduler'),\n                        },\n                        value: this.setting(settingsPrefix + 'mode')() || 'frontend',\n                        onchange: this.setting(settingsPrefix + 'mode'),\n                    }),\n                    m('p.helpText', app.translator.trans(translationPrefix + 'mode_help')),\n                ]),\n                m('.Form-group', [\n                    m('label', app.translator.trans(translationPrefix + 'scheduler_frequency')),\n                    Select.component({\n                        options: {\n                            everyFiveMinutes: app.translator.trans(translationPrefix + 'scheduler_frequency_options.everyFiveMinutes'),\n                            everyTenMinutes: app.translator.trans(translationPrefix + 'scheduler_frequency_options.everyTenMinutes'),\n                            everyFifteenMinutes: app.translator.trans(translationPrefix + 'scheduler_frequency_options.everyFifteenMinutes'),\n                            everyThirtyMinutes: app.translator.trans(translationPrefix + 'scheduler_frequency_options.everyThirtyMinutes'),\n                            hourly: app.translator.trans(translationPrefix + 'scheduler_frequency_options.hourly'),\n                        },\n                        value: this.setting(settingsPrefix + 'scheduler_frequency')() || 'hourly',\n                        onchange: this.setting(settingsPrefix + 'scheduler_frequency'),\n                        disabled: this.setting(settingsPrefix + 'mode')() !== 'scheduler',\n                    }),\n                    m('p.helpText', app.translator.trans(translationPrefix + 'scheduler_frequency_help')),\n                ]),\n                m('.Form-group', [\n                    m('label', app.translator.trans(translationPrefix + 'conditions')),\n                    m('table', [\n                        m('tbody', [\n                            conditionsList.map((conditions, index) => m('tr', [\n                                m('td', index === 0 ? null : m('strong', app.translator.trans(translationPrefix + 'or'))),\n                                m('td', [\n                                    m('label', [\n                                        app.translator.trans(translationPrefix + 'comments'),\n                                        ' >= ',\n                                    ]),\n                                    m('input.FormControl', {\n                                        type: 'number',\n                                        step: 1,\n                                        min: 0,\n                                        value: conditions.comments || '',\n                                        onchange: event => {\n                                            conditions.comments = event.target.value ? parseInt(event.target.value) : null;\n                                            this.setting(settingsPrefix + 'conditions')(JSON.stringify(conditionsList));\n                                        },\n                                        placeholder: app.translator.trans(translationPrefix + 'comments_placeholder'),\n                                    }),\n                                    m('label', [\n                                        ' ',\n                                        app.translator.trans(translationPrefix + 'within'),\n                                        ' ',\n                                    ]),\n                                    m('input.FormControl', {\n                                        type: 'number',\n                                        step: 1,\n                                        min: 0,\n                                        value: conditions.comments_within_hours || '',\n                                        onchange: event => {\n                                            conditions.comments_within_hours = event.target.value ? parseInt(event.target.value) : null;\n                                            this.setting(settingsPrefix + 'conditions')(JSON.stringify(conditionsList));\n                                        },\n                                        placeholder: app.translator.trans(translationPrefix + 'within_placeholder'),\n                                        disabled: this.setting(settingsPrefix + 'mode')() !== 'scheduler',\n                                    }),\n                                    m('label', [\n                                        ' ',\n                                        app.translator.trans(translationPrefix + 'hours'),\n                                    ]),\n                                ]),\n                                m('td', m('strong', app.translator.trans(translationPrefix + 'and'))),\n                                m('td', [\n                                    m('label', [\n                                        app.translator.trans(translationPrefix + 'views'),\n                                        ' >= ',\n                                    ]),\n                                    m('input.FormControl', {\n                                        type: 'number',\n                                        step: 1,\n                                        min: 0,\n                                        value: conditions.views || '',\n                                        onchange: event => {\n                                            conditions.views = event.target.value ? parseInt(event.target.value) : null;\n                                            this.setting(settingsPrefix + 'conditions')(JSON.stringify(conditionsList));\n                                        },\n                                        placeholder: app.translator.trans(translationPrefix + 'views_placeholder'),\n                                    }),\n                                    m('label', [\n                                        ' ',\n                                        app.translator.trans(translationPrefix + 'within'),\n                                        ' ',\n                                    ]),\n                                    m('input.FormControl', {\n                                        type: 'number',\n                                        step: 1,\n                                        min: 0,\n                                        value: conditions.views_within_hours || '',\n                                        onchange: event => {\n                                            conditions.views_within_hours = event.target.value ? parseInt(event.target.value) : null;\n                                            this.setting(settingsPrefix + 'conditions')(JSON.stringify(conditionsList));\n                                        },\n                                        placeholder: app.translator.trans(translationPrefix + 'within_placeholder'),\n                                        disabled: this.setting(settingsPrefix + 'mode')() !== 'scheduler',\n                                    }),\n                                    m('label', [\n                                        ' ',\n                                        app.translator.trans(translationPrefix + 'hours'),\n                                    ]),\n                                ]),\n                                m('td', conditionsList.length > 1 ? Button.component({\n                                    className: 'Button Button--icon',\n                                    icon: 'fas fa-times',\n                                    onclick: () => {\n                                        conditionsList.splice(index, 1);\n\n                                        this.setting(settingsPrefix + 'conditions')(JSON.stringify(conditionsList));\n                                    },\n                                }) : null),\n                            ])),\n                            m('tr', m('td', {\n                                colspan: 5,\n                            }, Button.component({\n                                className: 'Button Button--block',\n                                onclick: () => {\n                                    conditionsList.push({\n                                        comments: null,\n                                        views: null,\n                                    });\n\n                                    this.setting(settingsPrefix + 'conditions')(JSON.stringify(conditionsList));\n                                },\n                            }, app.translator.trans(translationPrefix + 'add'))))\n                        ]),\n                    ]),\n                    m('p.helpText', app.translator.trans(translationPrefix + 'conditions_help')),\n                ]),\n            ];\n        });\n});\n"],"names":["__webpack_require__","module","getter","__esModule","d","a","exports","definition","key","o","Object","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","Symbol","toStringTag","value","flarum","core","compat","settingsPrefix","translationPrefix","app","registerSetting","conditionsList","_this","JSON","parse","this","setting","e","Array","isArray","comments","views","m","Select","options","frontend","scheduler","onchange","everyFiveMinutes","everyTenMinutes","everyFifteenMinutes","everyThirtyMinutes","hourly","disabled","map","conditions","index","type","step","min","event","target","parseInt","stringify","placeholder","comments_within_hours","views_within_hours","length","Button","className","icon","onclick","splice","colspan","push"],"sourceRoot":""}